// Note: brjsPath is set in gradle.properties
if (project.hasProperty("brjsPath")) 
{
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'java'

	dependencies {
		compile fileTree(dir:brjsPath, include:"sdk/libs/java/system/*.jar")
	}

	task copyToBrjs, type: Copy, dependsOn: jar, {
		def brjsConfJavaDir = new File("${brjsPath}/conf/java")
		from jar.outputs.files.singleFile
		into brjsConfJavaDir
		doLast {
			println "${project.name} jar copied to ${brjsConfJavaDir.getAbsolutePath()}"
		}
	}

	// automatically add brjs-core sources jar for Eclipse classpath
	tasks.eclipse.doLast {
		try {
			def classPathFile = file(".classpath")
			String brjsCoreJar = fileTree(dir:"${brjsPath}/sdk/libs/java/system", include:"brjs-core-*.jar").singleFile
			String brjsSrcJar = fileTree(dir:"${brjsPath}/sdk/docs/src", include:"brjs-core-*-sources.jar").singleFile
			def findString = "path=\"${brjsCoreJar}\""
			def replaceString = findString + " sourcepath=\"${brjsSrcJar}\""
			if (classPathFile.exists()) {
				classPathFile.write( classPathFile.text.replace(findString, replaceString) )
			}
		} catch (IllegalStateException ex) {  // do nothing with the exception, it was probably thrown because the src jar doesnt exist
			logger.warn("Warning: Exception was thrown when attempting to add the brjs-core src jar to the classpath. Sources will not be added to the Eclipse classpath.")
			logger.debug(ex.toString())
		}
	}

}
else
{
	/* 
	 *  This configuration, and the wrapping if/else statement can be deleted once the project has been initialised.
	 *  Make sure to keep the dependencies configuration and other tasks.
	 */
	logger.warn("\n## WARNING: You are attempting to run a command(s) before initialising this project. You should first run the 'init' task. (If you are running the init task you can ignore this message) ##\n")

	task init, {
		description "Creates Gradle properties file, directories for src and resources along with the META-INF/services for plugin definitions"
		doFirst {
			def brjsPropName = "brjs"
			if (!project.hasProperty(brjsPropName))
			{
				throw new GradleException("Please supply the path to your BRJS directory.\nFor example if your BRJS dir is '/home/bob/brjs/1.0' run './gradlew init -P${brjsPropName}=/home/bob/brjs/1.0'.")
			}
			def brjsPropValue = project.property(brjsPropName)
			def brjsDir = new File(brjsPropValue)
			if (!brjsDir.isDirectory())
			{
				throw new GradleException("The BRJS path supplied, '${brjsPropValue}', resolves to the path '${brjsDir.getCanonicalPath()}' which either doesn't exist or is not a directory. Please ensure it is a valid path to the BRJS sdk dir.")
			}
			def brjsSdkDir = new File(brjsDir, "sdk")
			if (!brjsSdkDir.isDirectory())
			{
				throw new GradleException("The BRJS path, '${brjsDir.getCanonicalPath()}', doesnt appear to be a valid BRJS directory since it doesn't contain an 'sdk' directory.")
			}
			def gradlePropsFile = file("gradle.properties")
			if (gradlePropsFile.exists())
			{
				throw new GradleException("${gradlePropsFile.path} exists, meaning this project has probably already been initialised and can't be initialised again.")
			}
			gradlePropsFile.write("brjsPath=${brjsDir.getCanonicalPath()}");
			[file("src/main/java"), file("src/main/resources/META-INF/services"), file("src/test/java"), file("src/test/resources")].each {
				if (!it.exists()) { it.mkdirs() }
			}
			println "\n"+
				"gradle.properties and src & resources directories created successfully, you can now delete the 'init' task from build.gradle.\n"+
				"You should now run './gradlew eclipse' or './gradlew idea' to generate the project files for your IDE and can then run tasks to compile and test your project.\n"+
				"Run './gradlew tasks' to view a list of tasks available via Gradle or read README.md for more info.\n"
		}
	}

}
